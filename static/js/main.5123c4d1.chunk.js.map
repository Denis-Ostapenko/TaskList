{"version":3,"sources":["components/app-header/app-header.js","components/new-task-form/new-task-form.js","components/task-list-item/task-list-item.js","components/task-list/task-list.js","components/app-footer/app-footer.js","components/app/app.js","index.js"],"names":["AppHeader","NewTaskForm","state","label","onSubmit","event","preventDefault","addItem","props","setState","onLabelChenge","target","value","this","type","className","placeholder","onChange","Component","defaultProps","TaskListItem","handleChange","parentNode","querySelector","setAttribute","id","keyCode","сompleted","data","itemDelete","itemCompleted","dateObj","Date","wasCreated","formatDistanceToNow","includeSeconds","addSuffix","classNames","onClick","defaultValue","active","onKeyDown","TaskList","task","todos","elements","map","item","display","itemProps","AppFooter","all","completed","onClickAll","onClickActive","onClickCompleted","onClickClear","doneCount","App","taskData","JSON","parse","localStorage","getItem","i","findIndex","el","slice","text","oldItem","newItem","createTaskItem","element","length","filter","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5123c4d1.chunk.js","sourcesContent":["import React from 'react';\n\nimport './app-header.css';\n\nconst AppHeader = () => <h1>todos</h1>;\n\nexport default AppHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './new-task-form.css';\n\nexport default class NewTaskForm extends Component {\n  state = {\n    label: '',\n  };\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    const { addItem } = this.props;\n    const { label } = this.state;\n    addItem(label);\n    this.setState({ label: '' });\n  };\n\n  onLabelChenge = (event) => {\n    this.setState({\n      label: event.target.value,\n    });\n  };\n\n  render() {\n    const { label } = this.state;\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.onLabelChenge}\n          value={label}\n        />\n      </form>\n    );\n  }\n}\n\nNewTaskForm.defaultProps = {\n  addItem: () => {},\n};\n\nNewTaskForm.propTypes = {\n  addItem: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport PropTypes from 'prop-types';\n\nimport './task-list-item.css';\n\nexport default class TaskListItem extends Component {\n  handleChange = (event) => {\n    event.target.parentNode.querySelector('label').setAttribute('active', 'false');\n    event.target.parentNode.querySelector('.edit').setAttribute('active', 'true');\n  };\n\n  onSubmit = (event) => {\n    const { id, addItem } = this.props;\n    if (event.keyCode === 13) {\n      const label = event.target.value;\n      addItem(label, id);\n      event.target.parentNode.querySelector('label').setAttribute('active', 'true');\n      event.target.parentNode.querySelector('.edit').setAttribute('active', 'false');\n    }\n  };\n\n  render() {\n    const { label, сompleted, data, itemDelete, itemCompleted } = this.props;\n\n    const dateObj = new Date(data);\n\n    const wasCreated = formatDistanceToNow(dateObj, { includeSeconds: true }, { addSuffix: true });\n\n    let classNames = 'task-list-item';\n    if (сompleted) {\n      classNames += ' completed';\n    }\n\n    return (\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" onClick={itemCompleted} />\n        <label>\n          <span className={classNames}>{label}</span>\n          <span className=\"created\">created {wasCreated}</span>\n        </label>\n\n        <button type=\"button\" className=\"icon icon-edit\" aria-label=\"Icon input edit\" onClick={this.handleChange} />\n\n        <button type=\"button\" className=\"icon icon-destroy\" aria-label=\"Icon input deleted\" onClick={itemDelete} />\n\n        <input type=\"text\" className=\"edit\" defaultValue={label} active=\"false\" onKeyDown={this.onSubmit} />\n      </div>\n    );\n  }\n}\n\nTaskListItem.defaultProps = {\n  label: 'text',\n  сompleted: false,\n  data: new Date(),\n  itemDelete: () => {},\n  itemCompleted: () => {},\n  id: 10,\n  addItem: () => {},\n};\n\nTaskListItem.propTypes = {\n  label: PropTypes.string,\n  сompleted: PropTypes.bool,\n  data: PropTypes.objectOf(PropTypes.number),\n  itemDelete: PropTypes.func,\n  itemCompleted: PropTypes.func,\n  id: PropTypes.number,\n  addItem: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TaskListItem from '../task-list-item/task-list-item';\n\nimport './task-list.css';\n\nconst TaskList = (task) => {\n  const { todos, itemDelete, itemCompleted, addItem } = task;\n  const elements = todos.map((item) => {\n    const { id, display, ...itemProps } = item;\n    let classNames = '';\n    if (!display) {\n      classNames = 'display-none';\n    }\n    return (\n      <li key={id} className={classNames}>\n        <TaskListItem\n          {...itemProps}\n          id={id}\n          itemDelete={() => itemDelete(id)}\n          itemCompleted={() => itemCompleted(id)}\n          addItem={addItem}\n        />\n      </li>\n    );\n  });\n\n  return <ul className=\"todo-list\">{elements}</ul>;\n};\n\nTaskList.defaultProps = {\n  todos: [],\n  itemDelete: () => {},\n  itemCompleted: () => {},\n};\n\nTaskList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object),\n  itemDelete: PropTypes.func,\n  itemCompleted: PropTypes.func,\n};\n\nexport default TaskList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './app-footer.css';\n\nexport default class AppFooter extends Component {\n  state = {\n    all: 'true',\n    active: 'false',\n    completed: 'false',\n  };\n\n  onClickAll = () => {\n    const { onClickAll } = this.props;\n    this.setState({\n      all: 'true',\n      active: 'false',\n      completed: 'false',\n    });\n    onClickAll();\n  };\n\n  onClickActive = () => {\n    const { onClickActive } = this.props;\n    this.setState({\n      all: 'false',\n      active: 'true',\n      completed: 'false',\n    });\n    onClickActive();\n  };\n\n  onClickCompleted = () => {\n    const { onClickCompleted } = this.props;\n    this.setState({\n      all: 'false',\n      active: 'false',\n      completed: 'true',\n    });\n    onClickCompleted();\n  };\n\n  render() {\n    const { onClickClear, doneCount } = this.props;\n\n    const { all, active, completed } = this.state;\n\n    return (\n      <div className=\"footer\">\n        <span className=\"todo-count\">{doneCount} items left</span>\n        <div className=\"filters\">\n          <button type=\"button\" className=\"btn\" active={all} onClick={this.onClickAll}>\n            All\n          </button>\n          <button type=\"button\" className=\"btn\" active={active} onClick={this.onClickActive}>\n            Active\n          </button>\n          <button type=\"button\" className=\"btn\" active={completed} onClick={this.onClickCompleted}>\n            Completed\n          </button>\n        </div>\n        <button type=\"button\" className=\"clear-completed\" onClick={onClickClear}>\n          Clear completed\n        </button>\n      </div>\n    );\n  }\n}\n\nAppFooter.defaultProps = {\n  onClickAll: () => {},\n  onClickActive: () => {},\n  onClickCompleted: () => {},\n  onClickClear: () => {},\n  doneCount: 1,\n};\n\nAppFooter.propTypes = {\n  onClickAll: PropTypes.func,\n  onClickActive: PropTypes.func,\n  doneCount: PropTypes.number,\n  onClickCompleted: PropTypes.func,\n  onClickClear: PropTypes.func,\n};\n","import React, { Component } from 'react';\n\nimport AppHeader from '../app-header/app-header';\nimport NewTaskForm from '../new-task-form/new-task-form';\nimport TaskList from '../task-list/task-list';\nimport AppFooter from '../app-footer/app-footer';\n\nimport './app.css';\n\nexport default class App extends Component {\n  state = {\n    taskData: JSON.parse(localStorage.getItem('taskData')) || [],\n  };\n\n  itemDelete = (id) => {\n    this.setState(({ taskData }) => {\n      const i = taskData.findIndex((el) => el.id === id);\n      const newArr = [...taskData.slice(0, i), ...taskData.slice(i + 1)];\n      return {\n        taskData: newArr,\n      };\n    });\n  };\n\n  addItem = (text, id = 0) => {\n    if (id !== 0) {\n      this.setState(({ taskData }) => {\n        const i = taskData.findIndex((el) => el.id === id);\n        const oldItem = taskData[i];\n        const newItem = { ...oldItem };\n        newItem.label = text;\n        const newArr = [...taskData.slice(0, i), newItem, ...taskData.slice(i + 1)];\n        return {\n          taskData: newArr,\n        };\n      });\n    } else {\n      const newItem = this.createTaskItem(text);\n      this.setState(({ taskData }) => {\n        const newArray = [...taskData, newItem];\n        return {\n          taskData: newArray,\n        };\n      });\n    }\n  };\n\n  itemCompleted = (id) => {\n    this.setState(({ taskData }) => {\n      const i = taskData.findIndex((el) => el.id === id);\n      const oldItem = taskData[i];\n      const newItem = { ...oldItem, сompleted: !oldItem.сompleted };\n      return {\n        taskData: [...taskData.slice(0, i), newItem, ...taskData.slice(i + 1)],\n      };\n    });\n  };\n\n  onClickAll = () => {\n    this.setState(({ taskData }) => {\n      const newArr = taskData.map((element) => ({ ...element, display: true }));\n      return {\n        taskData: newArr,\n      };\n    });\n  };\n\n  onClickActive = () => {\n    this.setState(({ taskData }) => {\n      const newArr = taskData.map((element) => {\n        if (element['сompleted']) {\n          return { ...element, display: false };\n        }\n        return { ...element, display: true };\n      });\n      return {\n        taskData: newArr,\n      };\n    });\n  };\n\n  onClickCompleted = () => {\n    this.setState(({ taskData }) => {\n      const newArr = taskData.map((element) => {\n        if (element['сompleted']) {\n          return { ...element, display: true };\n        }\n        return { ...element, display: false };\n      });\n      return {\n        taskData: newArr,\n      };\n    });\n  };\n\n  onClickClear = () => {\n    this.setState(() => ({\n      taskData: [],\n    }));\n  };\n\n  createTaskItem(label) {\n    const { taskData } = this.state;\n    let id = 1;\n    if ([...taskData][taskData.length - 1]) {\n      id = [...taskData][taskData.length - 1].id + 1;\n    }\n    return {\n      label,\n      сompleted: false,\n      display: true,\n      data: new Date(),\n      id,\n    };\n  };\n\n  render() {\n    const { taskData } = this.state;\n    const doneCount = taskData.filter((el) => !el.сompleted).length;\n    localStorage.setItem('taskData', JSON.stringify(taskData));\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <AppHeader />\n          <NewTaskForm addItem={this.addItem} />\n        </header>\n        <section className=\"main\">\n          <TaskList\n            todos={taskData}\n            itemDelete={this.itemDelete}\n            itemCompleted={this.itemCompleted}\n            addItem={this.addItem}\n          />\n          <AppFooter\n            onClickAll={this.onClickAll}\n            onClickActive={this.onClickActive}\n            onClickCompleted={this.onClickCompleted}\n            onClickClear={this.onClickClear}\n            doneCount={doneCount}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}